{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list-component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","emp","id","name","email","CardList","employess","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchString","target","value","state","string","fetch","then","resp","json","users","this","filteredEmpList","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAGaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,WAAWC,IAAG,8BAAyBH,EAAMI,IAAIC,GAAnC,4BACvB,4BAAKL,EAAMI,IAAIE,MACf,2BAAIN,EAAMI,IAAIG,UCHTC,G,MAAW,SAACR,GAAD,OACpB,yBAAKC,UAAU,aAEXD,EAAMS,UAAUC,KAAI,SAAAN,GAAG,OACnB,kBAAC,EAAD,CAAMO,IAAKP,EAAIC,GAAID,IAAKA,UCJvBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACAb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,OC8CCG,E,kDAhDb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,aAAcF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXC,OAAQ,cACRf,UAAW,GAEXW,aAAc,IANL,E,gEAUO,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACV,UAAWoB,S,+BAOlC,IAAD,EAE4BC,KAAKP,MAAhCd,EAFD,EAECA,UAAWW,EAFZ,EAEYA,aACZW,EAAkBtB,EAAUuB,QAAO,SAAA5B,GAAG,OAC1CA,EAAIE,KAAK2B,cAAcC,SAASd,EAAaa,kBAEjD,OAEE,yBAAKhC,UAAU,OACf,oEACA,kBAAC,EAAD,CACEY,YAAY,mBACZC,aAAcgB,KAAKhB,eAGrB,kBAAC,EAAD,CAAUL,UAAWsB,S,GArCPI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8c37a0d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"empPhoto\" src={`http://robohash.org/${props.emp.id}?set=set2&size=180x180`} />\r\n        <h2>{props.emp.name}</h2>\r\n        <p>{props.emp.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => ( \r\n    <div className='card-list'>\r\n    {\r\n        props.employess.map(emp => (\r\n            <Card key={emp.id} emp={emp} />\r\n        ))\r\n    }\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className='search' \r\n    type='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange} \r\n    />\r\n);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {CardList} from './components/card-list/card-list-component'\r\nimport {SearchBox} from './components/search-box/search-box.component'\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      string: 'Hello world',\r\n      employess: [\r\n      ],\r\n      searchString: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(resp => resp.json())\r\n    .then(users => this.setState({employess: users}));\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({searchString: e.target.value});\r\n  }\r\n\r\n  render(){\r\n\r\n    const {employess, searchString} = this.state\r\n    const filteredEmpList = employess.filter(emp => \r\n      emp.name.toLowerCase().includes(searchString.toLowerCase())\r\n      );\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n    <h1> Single page application using React</h1>\r\n    <SearchBox\r\n      placeholder=\"Search employees\"\r\n      handleChange={this.handleChange}\r\n    />\r\n   \r\n    <CardList employess={filteredEmpList}>\r\n       \r\n    </CardList>\r\n      {/*\r\n        this.state.employess.map( emp => (\r\n          <h1 key={emp.id}> {emp.id}. {emp.name}, {emp.email}</h1>\r\n        ))\r\n        */} \r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}